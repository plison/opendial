#summary Encoding rule-structured dialogue domains in XML.

= Dialogue domains =

This section details how to practically encode dialogue domains for !OpenDial using XML.

== General structure ==

A !OpenDial dialogue domain follows the skeleton below:
{{{
<domain>

  <initialstate>
    <!--(optional) initial state variables -->
  </initialstate>

  <parameters>
    <!--(optional) prior distributions for rule parameters -->
  </parameters>

  <model trigger="trigger variables for model 1">
    <!--probabilistic rules for model 1 -->
  </model>

  <model trigger="trigger variables for model 2">
    <!-- probabilistic rules for model 2 -->
  </model>

  ... 

  <model trigger="trigger variables for model n">
    <!-- probabilistic rules for model n -->
  </model>


  <settings>
    <!--(optional) domain-specific settings -->
  </settings>

</domain>

}}}

The settings, initial state and parameters can be left out of the domain specification if empty.  The number of rule-structured models is arbitrary.

For more complex domains, the domain specification can be split in several files through the `import`marker: 
{{{
    <import href="path to another file" />
}}}

Examples of domain specification can be found in the directory `domains` and `test/domains` of the base directory.

<br>

== Initial state ==

The initial state for the domain defines the variables included in the dialogue state upon starting the dialogue system. Each variable has a particular identifier and a probability distribution.

Variables with a discrete range of values are defined in this manner:
{{{
<variable id="variable_id">
  <value prob="probability for first value">first value</value>
  <value prob="probability for second value">second value</value>
  ...
  <value prob="probability for the nth value">nth value</value>
</variable>
}}}

The probability values must be comprised between 0 and 1.  If the total probability amounts to less than 1, !OpenDial automatically adds an empty value (`None`) for the remaining probability mass.  If the `prob` attribute is omitted, the value is assumed to have a probability 1. 

Here is a simple example of initial state variable:
{{{
<variable id="userIntention">
  <value prob="0.5">Want(Object_A)</value>
  <value prob="0.3">Want(Object_B)</value>
</variable>
}}}

State variables can also be defined for continuous range of values.  In such a case, the probability distribution is defined in a parametric manner:
 * *Uniform distributions* are defined with two parameters `min` and `max`.  The distribution U(-1,3) is encoded as:
{{{
<variable id="uniform_example">
  <distrib type="uniform">
    <min>-1</min>
    <max>3</max>
  </distrib>
</variable>
}}}

 * *Gaussian distributions* are defined with two parameters `mean` and `variance` -- for instance, N(2, 4) is encoded as:
{{{
<variable id="gaussian_example">
  <distrib type="gaussian">
    <mean>-1</mean>
    <variance>3</variance>
  </distrib>
</variable>
}}}

See [http://opendial.googlecode.com/svn/trunk/src/opendial/bn/distribs/continuous/ `src/opendial/bn/distribs/continuous`] for details.

== Parameters ==

As shall be explained in the next section, probabilistic rules 

== Models ==

A dialogue model is essentially defined as a set of probabilistic rules combined with one or more "trigger variables" that defines when the rules are to be applied:
{{{
<model trigger="trigger variable(s)">

 <rule id="rule 1">
      ...
 </rule>

 <rule id="rule 2">
      ...
 </rule>

 ...

 <rule id="rule n">
      ...
 </rule>

</model>
}}}

The rules can either encode probability or utility rules, as explained below (also see [http://folk.uio.no/plison/pdfs/thesis/thesis-plison2013.pdf Pierre Lison's Ph.D. thesis] for more explanations).

=== Probability rules ===


==== Conditions ====

==== Effects ====


=== Utility rules ===

=== Quantification ===


== Settings ==