#summary Quick start guide to OpenDial
#sidebar TableOfContents

= Getting started =


== 1. Downloading !OpenDial ==

Click on the "Downloads" tab on the project page to download the toolkit.

== 2. Compiling !OpenDial ==

When you have downloaded !OpenDial, you must compile the Java source code.  The easiest way to do it is via [http://ant.apache.org Ant]. First check whether ant is installed on your machine (simply type `ant` on the command line and see the result).

To compile !OpenDial, go to the main directory (containing the `build.xml` file) and type:
{{{
ant
}}}

The above command will compile all java files and install the classes in the `bin` directory. Note that the latest version of !OpenDial requires *Java 8* to compile and run the toolkit.

You can check whether !OpenDial works as expected by running the JUnit tests:
{{{
ant test
}}}
If everything works correctly, all tests should be successful (although it is not unusual to encounter one or two failed tests because of approximation errors during sampling).

<br>

== 3. Starting !OpenDial ==

Once !OpenDial is installed and compiled, you are now ready to run it.  Simply type:
{{{
ant run
}}}

A window similar to this one should pop up:


<br><p align="center">
<img align="center" src="http://opendial.googlecode.com/svn/wiki/opendial_start.png"><br>_Figure 1: !OpenDial start window._<br><br>


Additional properties can be included in the command line.  All these properties are optional (and can usually also be changed through the graphical interface):
|| *Property name* || *Value* ||
|| {{{domain}}} || File path for domain specification (cf. [DialogueDomains Specifying Dialogue Domains]) ||
|| {{{settings}}} || File path for system settings (default is in `resources/settings.xml`) ||
|| {{{dialogue}}} || File path of previously recorded dialogue to import ||
|| {{{simulator}}} || Filepath of domain specification for a user simulator (cf. [ParameterEstimation Learning parameters from data]) ||
|| {{{gui}}} || `true`/`false` to activate or deactivate the graphical interface (default is `true`). ||

Command line parameters must be specified in the following manner:
{{{
ant run -Dname_of_property1=value1 -Dname_of_property2=value2 ....
}}}
where {{{name_of_propertyX}}} must be replaced by the property names in the above table.


<br>

== 4. Using !OpenDial == 

You can try out !OpenDial by opening a dialogue domain such as the one specified in [http://opendial.googlecode.com/svn/trunk/domains/examples/example-step-by-step_fixed.xml domains/example/example-step-by-step_fixed.xml] and typing a new user input such as: "please turn left".  You should then see in the chat window the system answer: "OK, turning Left".

=== Chat Window ===

The chat window displays the current conversation history.  

<br><p align="center">
<img align="center" src="http://opendial.googlecode.com/svn/wiki/opendial_chat.png"><br>_Figure 2: Example of dialogue in the chat window.<br><br>

At the bottom of the page, a text field can be used to enter new inputs (this feature is useful to test the system behaviour without a speech recognizer). N-best lists can be entered by specifying probabilities in parentheses and separating alternative hypotheses with a semicolon (;).  For instance, the user input:
{{{
now move left (0.55) ; do not move left (0.15)
}}}

represents a N-best list with three alternative elements: "now move left" with probability 0.55, "do not move left" with probability 0.15, and a last empty element (no input) with probability 0.3.


=== State Viewer ===

The state viewer displays the current dialogue state as a Bayesian network.  The user can click on each variable (or sets of variables) and derive their marginal probability distribution.  In addition, the distribution of individual variables can be represented graphically in a chart or density function:

<br><p align="center">
<img align="center" src="http://opendial.googlecode.com/svn/wiki/opendial_viewer.png"><br>_Figure 3: State viewer interface in !OpenDial._<br><br>


In addition to the current dialogue state, the system can also keep track and record past dialogue states.  This can be very useful for debugging, as it shows how the dialogue state evolves during processing.  The menu item _Options_ > _Record Intermediate States_ allows you to determine which states to record.

=== Toolbar ===

The !OpenDial toolbar offers several functions:

|| _Domain_ > _Open Domain_ || Changes the current dialogue domain ||
|| _Domain_ > _Import_ > _Dialogue State_ || Imports a previously saved dialogue state into the system ||
|| _Domain_ > _Import_ > _Parameters_ || Imports parameter variables into the system ||
|| _Domain_ > _Export_ > _Dialogue State_ || Exports the current dialogue state into an XML file ||
|| _Domain_ > _Import_ > _Parameters_ || Exports the current parameters into an XML file ||
|| _Interaction_ > _Pause/Resume_ || Pauses or resumes the current interaction ||
|| _Interaction_ > _Connect to Remote Client_ || Connects to a remote machine that also runs !OpenDial (in order to e.g. conduct Wizard-of-Oz experiments) ||
|| _Interaction_ > _Interaction role_ || If the system is connected to a remote client, selects the role (user or system) played by the local machine. ||
|| _Interaction_ > _Import Dialogue From_ || Imports a previous saved dialogue and runs through it again ||
|| _Interaction_ > _Save Dialogue As_ || Exports the dialogue history to an XML file ||
|| _Options_ > _View Utterances_ || Determines how to display the user utterances in the chat window ||
|| _Options_ > _Record Intermediate States_ || Determines whether to record intermediate states in the state viewer ||
|| _Options_ > _Show/Hide Parameters_ || Determines whether to display parameters in the state viewer||
|| _Options_ > _Settings_ || Changes the current system settings ||

<br><br>