#summary How to implement new modules in !OpenDial

= External modules ==

Although probabilistic rules can represent a wide range of domain-specific knowledge and reasoning patterns, external modules remain of course necessary to interface the system with its environment -- for instance to perform tasks such as speech recognition, contextual awareness, and speech synthesis.


!OpenDial modules must implement the interface `Module` shown below:
{{{

  /**
   * Starts the module. 
   * 
   * @throws DialException if the initialisation fails
   */
  public void start() throws DialException;

  /**
   * Triggers the module after a state update
   * 
   * @param state the dialogue state
   * @param updatedVars the set of updated variables
   */
  public void trigger(DialogueState state, Collection<String> updatedVars);

  /**
   * Pauses the current module
   * 
   * @param toPause whether to pause or resume the module
   */
  public void pause(boolean toPause);

  
  /**
   * Returns true if the module is running (i.e. started and not paused), and
   * false otherwise
   * 
   * @return whether the module is running or not
   */
  public boolean isRunning();
}}}


== Synchronous modules ==

Some modules operate in synchronous mode. Synchronous modules continuously monitor the dialogue state for relevant changes. Their activation is thus performed as part of the dialogue update loop.

The core of a synchronous module is its implementation of the method `trigger(DialogueState state, Collection<String> updatedVars)`. Given the current dialogue state and a list of recently updated variables, the method should trigger the internal module processing, and possibly re-update the dialogue state.^[1]^

An basic example of synchronous module is shown in [http://opendial.googlecode.com/svn/trunk/src/opendial/modules/ModuleExample1.java src/opendial/modules/ModuleExample1.java].  The module creates a small grid window with the location of the agent at its center.  When applied together with the [SimpleExample step-by-step example], the grid window is updated after each movement to reflect the new position.

== Asynchronous modules ==

Other modules need to run independently of the dialogue state. Such asynchronous modules typically relate to visual or speech perception tasks. Asynchronous modules update the dialogue state as soon as new observations are made available.

Asynchronous modules must run in a separate thread to avoid blocking the execution of other system components.

An basic example of asynchronous module is shown in [http://opendial.googlecode.com/svn/trunk/src/opendial/modules/ModuleExample2.java src/opendial/modules/ModuleExample2.java].  The module creates a small grid window with four arrow buttons that can be clicked to instruct the agent to move in a particular direction. The method `system.addContent(...)` is employed to update the dialogue state with new information.  Following this update, relevant domain models and synchronous modules are then triggered.


== Attaching a module to the system ==

Attaching a module to the dialogue system can be done in several ways:
 * The first possibility is to click on `Options > Load Modules` and activate the module.  

 * The second possibility is to add the module's full classname (e.g. `opendial.modules.ModuleExample1`) in the [DialogueDomains#5._System_settings domain settings]. 

 * The third possibility is to add the module classname to the command line as -Dmodules=classname

 * Finally, one can also include the module programmatically by creating the module instance and calling the method `attachModule(...)` in the current `DialogueSystem`.


Note that the three first options will only work for modules whose constructor includes the `DialogueSystem` instance as only argument (such as is the case for `ModuleExample1` and `ModuleExample2`). The fourth option will work for module with arbitrary constructors.

Modules can require some specific settings to be specified before initialisation. Such settings can be directly encoded as new properties in the `<settings>` element of the dialogue domain specification.  If a required parameter is missing, the module should throw a `MissingParameterException`. 

----

^[1]^ If a synchronous module adds or updates elements of the dialogue state as part of the trigger operation, it must do so through the method `state.addToState(...)`.  The method `addContent` in `DialogueSystem` should _not_ be used in this context due to synchronisation lock issues.