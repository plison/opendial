// =================================================================                                                                   
// Copyright (C) 2011-2013 Pierre Lison (plison@ifi.uio.no)                                                                            
//                                                                                                                                     
// This library is free software; you can redistribute it and/or                                                                       
// modify it under the terms of the GNU Lesser General Public License                                                                  
// as published by the Free Software Foundation; either version 2.1 of                                                                 
// the License, or (at your option) any later version.                                                                                 
//                                                                                                                                     
// This library is distributed in the hope that it will be useful, but                                                                 
// WITHOUT ANY WARRANTY; without even the implied warranty of                                                                          
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU                                                                    
// Lesser General Public License for more details.                                                                                     
//                                                                                                                                     
// You should have received a copy of the GNU Lesser General Public                                                                    
// License along with this program; if not, write to the Free Software                                                                 
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA                                                                           
// 02111-1307, USA.                                                                                                                    
// =================================================================                                                                   

package opendial.processes;

import static org.junit.Assert.*;

import java.awt.dnd.DnDConstants;

import org.junit.Test;

import opendial.arch.DialException;
import opendial.components.DialogueSystem;
import opendial.domains.Domain;
import opendial.inference.algorithms.VariableElimination;
import opendial.inputs.NBestList;
import opendial.outputs.Action;
import opendial.outputs.VerbalAction;
import opendial.outputs.VoidAction;
import opendial.readers.XMLDomainReader;
import opendial.utils.Logger;

/**
 * Testing for the general dialogue system pipeline
 *
 * @author  Pierre Lison (plison@ifi.uio.no)
 * @version $Date:: 2011-10-16 16:11:33 #$
 *
 */
public class DialogueSystemTest1 {

	static Logger log = new Logger("DialogueSystemTest1", Logger.Level.DEBUG);
	
	public String dialDomain = "domains//testing//microdom2.xml";

	 
	@Test
	public void pipelineTest1() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("How may I help you?", ((VerbalAction)action).getString());
	}
	
	
	@Test
	public void pipelineTest2() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		NBestList obs = new NBestList();
		obs.addUtterance("robot, please do X!", 1.0f);
		ds.addObservation(obs);
		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("OK, doing X!", ((VerbalAction)action).getString());
	}
	
	
	@Test
	public void pipelineTest3() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("robot, please do X!", 1.0f);
		ds.addObservation(obs);

		Thread.sleep(100);

		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("OK, doing X!", ((VerbalAction)action).getString());
	}
	
	 
	@Test
	public void pipelineTest4() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("bla bla bla", 1.0f);
		ds.addObservation(obs);

		Action action = ds.pollNextAction();

		assertTrue(action instanceof VerbalAction);
		assertEquals("Sorry, I did not understand", ((VerbalAction)action).getString());
	}
	
	
	@Test
	public void pipelineTest5() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("bla bla bla", 1.0f);
		ds.addObservation(obs);

		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("Sorry, I did not understand", ((VerbalAction)action).getString());
		
		NBestList obs2 = new NBestList();
		obs2.addUtterance("blo bli blo", 0.9f);
		ds.addObservation(obs2);

		Action action2 = ds.pollNextAction();
		assertTrue(action2 instanceof VerbalAction);
		assertEquals("Sorry, I did not understand", ((VerbalAction)action2).getString());
	}
	
	@Test
	public void pipelineTest6() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("bla bla bla", 1.0f);
		ds.addObservation(obs);

		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("Sorry, I did not understand", ((VerbalAction)action).getString());
		
		NBestList obs2 = new NBestList();
		obs2.addUtterance("do Y", 1.0f);
		ds.addObservation(obs2);

		Action action2 = ds.pollNextAction();
		assertTrue(action2 instanceof VerbalAction);
		assertEquals("OK, doing Y!", ((VerbalAction)action2).getString());
		
	//	Thread.sleep(100000);
	
	}
	
	
	@Test
	public void pipelineTest7() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);

		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("do X", 0.45f);
		ds.addObservation(obs);

		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		
		assertEquals("Sorry, could you repeat?", ((VerbalAction)action).getString());
		
		NBestList obs2 = new NBestList();
		obs2.addUtterance("do X", 0.7f);
		ds.addObservation(obs2);

		Action action2 = ds.pollNextAction();
		assertTrue(action2 instanceof VerbalAction);
			
		assertEquals("OK, doing X!", ((VerbalAction)action2).getString());

		Thread.sleep(100);
		log.debug("average query time: " + (VariableElimination.totalQueryTime * 1.0 / VariableElimination.nbQueries));
		log.debug("number of queries: " + VariableElimination.nbQueries);

	}
	
	
	@Test
	public void pipelineTest8() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);

		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("do X", 0.45f);
		ds.addObservation(obs);

		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);	
		assertEquals("Sorry, could you repeat?", ((VerbalAction)action).getString());
		
		ds.addObservation(obs);

		Action action2 = ds.pollNextAction();
		assertTrue(action2 instanceof VerbalAction);
		assertEquals("Sorry, could you repeat?", ((VerbalAction)action).getString());

		
		NBestList obs2 = new NBestList();
		obs2.addUtterance("do X", 0.6f);
		ds.addObservation(obs2);

		Action action3 = ds.pollNextAction();
		assertTrue(action3 instanceof VerbalAction);
			
		assertEquals("OK, doing X!", ((VerbalAction)action3).getString());
		
	}
	
 
	@Test
	public void pipelineTest9() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("robot, please do X!", 0.9f);
		
		synchronized (ds.getState()) {
		ds.addObservation(obs);
		ds.getState().wait();
		}

		assertTrue(ds.getState().getFluent("intent1") != null);

		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("OK, doing X!", ((VerbalAction)action).getString());
		
		synchronized (ds.getState().getPrediction()) {
			ds.getState().getPrediction().waitUntilReady();
		}
		
		assertTrue(ds.getState().getFluent("intent1") == null);
	}
	
	@Test
	public void pipelineTest10() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("hi my name is Pierre", 0.9f);
		ds.addObservation(obs);
		
		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("Hi pierre!", ((VerbalAction)action).getString());
		
		
		assertTrue(ds.getState().getFluent("name") != null);
	}
	
	@Test
	public void pipelineTest11() throws DialException, InterruptedException {
		
		XMLDomainReader reader = new XMLDomainReader();
		Domain domain = reader.extractDomain(dialDomain);
		DialogueSystem ds = new DialogueSystem(domain);
		ds.pollNextAction();
		
		NBestList obs = new NBestList();
		obs.addUtterance("do Y", 0.55f);
		ds.addObservation(obs);
		
		Action action = ds.pollNextAction();
		assertTrue(action instanceof VerbalAction);
		assertEquals("Do you want me to do Y?", ((VerbalAction)action).getString());
		
		NBestList obs2 = new NBestList();
		obs2.addUtterance("yes", 0.9f);
		ds.addObservation(obs2);

		Action action2 = ds.pollNextAction();
		assertTrue(action2 instanceof VerbalAction);
		assertEquals("OK, doing Y!", ((VerbalAction)action2).getString());
		Thread.sleep(100);
		log.debug("average query time: " + (VariableElimination.totalQueryTime * 1.0 / VariableElimination.nbQueries));
		log.debug("number of queries: " + VariableElimination.nbQueries);
	}
	
	
	public static void main(String[] args) throws DialException, InterruptedException {
		DialogueSystemTest1 test = new DialogueSystemTest1();
		test.pipelineTest1();
		
	}
}
