// =================================================================                                                                   
// Copyright (C) 2011-2013 Pierre Lison (plison@ifi.uio.no)                                                                            
//                                                                                                                                     
// This library is free software; you can redistribute it and/or                                                                       
// modify it under the terms of the GNU Lesser General Public License                                                                  
// as published by the Free Software Foundation; either version 2.1 of                                                                 
// the License, or (at your option) any later version.                                                                                 
//                                                                                                                                     
// This library is distributed in the hope that it will be useful, but                                                                 
// WITHOUT ANY WARRANTY; without even the implied warranty of                                                                          
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU                                                                    
// Lesser General Public License for more details.                                                                                     
//                                                                                                                                     
// You should have received a copy of the GNU Lesser General Public                                                                    
// License along with this program; if not, write to the Free Software                                                                 
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA                                                                           
// 02111-1307, USA.                                                                                                                    
// =================================================================                                                                   


package opendial.state.control;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

import opendial.arch.Settings;
import opendial.arch.DialException;
import opendial.arch.Logger;
import opendial.gui.GUIFrame;
import opendial.modules.SynchronousModule;
import opendial.planning.ForwardPlanner;
import opendial.state.DialogueState;
import opendial.state.change.Rule;
import opendial.state.change.RuleInstantiator;

public class StateController {

	// logger
	public static Logger log = new Logger("StateController", Logger.Level.DEBUG);

	DialogueState state;

	Stack<String> newVariables;

	List<SynchronousModule> modules;


	// number of processes currently working on the dialogue state
	List<Object> busyProcesses;

	// number of processes recently completed (but not yet pruned)
	List<Object> completedProcesses;
	
	StatePruner pruner;
	ForwardPlanner planner;



	public StateController(DialogueState state) {
		this.state = state;
		modules = new ArrayList<SynchronousModule>();
		newVariables = new Stack<String>();

		busyProcesses = new ArrayList<Object>();
		completedProcesses = new ArrayList<Object>();
		
		pruner = new StatePruner(state);
		planner = new ForwardPlanner(state);

	}


	public void attachModule(SynchronousModule module) {
		modules.add(module);
	}


	public synchronized void applyRule(Rule rule) throws DialException {
		RuleInstantiator instantiator = new RuleInstantiator(state, rule);
		setAsBusy(instantiator);
		(new Thread(instantiator)).start();
	}


	/**
	 * 
	 * @param string
	 * @return
	 */
	public synchronized boolean hasNewVariable(String nodeId) {
		return newVariables.contains(nodeId);
	}

	/**
	 * 
	 * @param id
	 */
	public synchronized void setVariableAsNew(String nodeId) {
		newVariables.add(nodeId);
	}

	protected synchronized void setAsBusy(Object process) {
		busyProcesses.add(process);
	}

	public synchronized void setAsCompleted(Object process) {
		busyProcesses.remove(process);
		completedProcesses.add(process);
		if (busyProcesses.isEmpty()) {
			if (!newVariables.isEmpty()) {
				triggerUpdates();
			}
			else {	
				finishOperations();
			}
		}

	}

	protected synchronized void finishOperations() {
		busyProcesses.add(this);
		if (pruner.isPruningNeeded()) {
			setAsBusy(pruner);
			(new Thread(pruner)).start();
		}	
		else if (planner.isPlanningNeeded()) {	
			setAsBusy(planner);
			(new Thread(planner)).start();
		}	
		else {
			refresh();
		}
		busyProcesses.remove(this);
	}
	
	
	public synchronized void refresh() {
		
		completedProcesses.clear();	
		if (Settings.getInstance().isGUIShown()) {
			GUIFrame.getSingletonInstance().updateCurrentState(state);
		}
		synchronized (state) { state.notifyAll(); }
	}


	public synchronized void triggerUpdates() {
		setAsBusy(this);
			for (SynchronousModule module : modules) {

				if (!(state.isFictive() && module.isExternal())) {
					// trying to avoid infinite loops of triggers
					if (Collections.frequency(completedProcesses, module) < 2) {
						module.trigger(state);
					}
					else {
						log.warning("looping processes: " + completedProcesses);
					}
				}
			}
		newVariables.clear();
		setAsCompleted(this);
	}

 
	public boolean isStable() {
		return (busyProcesses.isEmpty());
	}




	public synchronized String toString() {
		String s = "";
		s += "Busy processes: [";
		for (Object p : new HashSet<Object>(busyProcesses)) {
			s += p.getClass().getSimpleName() + ",";
		}
		s = (s + "]").replace(",]", "]")+ "\n";
		s += "Completed processes: [";
		for (Object p : new HashSet<Object>(completedProcesses)) {
			s += p.getClass().getSimpleName() + ",";
		}
		s = (s + "]").replace(",]", "]") + "\n";
		s += "New variables: " + newVariables;
		return s;
	}


	public Collection<SynchronousModule> getAttachedModules() {
		return new LinkedList<SynchronousModule>(modules);
	}


	public Stack<String> getNewVariables() {
		return newVariables;
	}


}
