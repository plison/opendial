// =================================================================                                                                   
// Copyright (C) 2011-2013 Pierre Lison (plison@ifi.uio.no)                                                                            
//                                                                                                                                     
// This library is free software; you can redistribute it and/or                                                                       
// modify it under the terms of the GNU Lesser General Public License                                                                  
// as published by the Free Software Foundation; either version 2.1 of                                                                 
// the License, or (at your option) any later version.                                                                                 
//                                                                                                                                     
// This library is distributed in the hope that it will be useful, but                                                                 
// WITHOUT ANY WARRANTY; without even the implied warranty of                                                                          
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU                                                                    
// Lesser General Public License for more details.                                                                                     
//                                                                                                                                     
// You should have received a copy of the GNU Lesser General Public                                                                    
// License along with this program; if not, write to the Free Software                                                                 
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA                                                                           
// 02111-1307, USA.                                                                                                                    
// =================================================================                                                                   

package opendial.inputs;

import java.util.HashMap;
import java.util.Map;

import opendial.utils.Logger;

/**
 * Representation of an N-best List generated by a speech recogniser. 
 * The N-best list is made of a list of alternative utterances, each of which
 * is associated with a particular score or probability.
 *
 * @author  Pierre Lison (plison@ifi.uio.no)
 * @version $Date::                      $
 *
 */
public class NBestList implements Observation {

	// logger
	static Logger log = new Logger("NBestList", Logger.Level.NORMAL);
	
	// the list of alternative utterances, with their probability
	Map<String,Float> hypotheses;
	
	
	/**
	 * Creates a new N-best list, with an empty list of utterances
	 */
	public NBestList() {
		hypotheses = new HashMap<String,Float>();
	}
	
	
	/**
	 * Creates a new N-best list, with the given list of utterances
	 * 
	 * @param alternativeUtterances the utterances
	 */
	public NBestList(Map<String,Float> hypotheses) {
		this.hypotheses = hypotheses;
	}
	
	
	/**
	 * Creates a new N-Best list with a single element
	 * 
	 * @param utt the utterance
	 * @param prob the probability
	 */
	public NBestList(String utt, float prob) {
		this();
		hypotheses.put(utt, prob);
	}


	/**
	 * Adds a new utterance (with associated probability) to the N-best list
	 * 
	 * @param utt the utterance
	 * @param prob the probability
	 */
	public void addUtterance(String utt, float prob) {
		hypotheses.put(utt, prob);
	}
	
	
	public String getBestHypothesis() {
		float bestScore = 0.0f;
		String bestHypo = "";
		for (String utt : hypotheses.keySet()) {
			if (hypotheses.get(utt) > bestScore) {
				bestScore = hypotheses.get(utt);
				bestHypo = utt;
			}
		}
		return bestHypo;
	}
	
	
	/**
	 * Returns the list of utterances, together with their probabilities
	 * 
	 * @return the list of utterances
	 */
	public Map<String,Float> getUtterances() {
		return hypotheses;
	}
	
	
	/**
	 * Returns a shortened version of the N-best list string representation,
	 * suitable for a chat window
	 * 
	 * @return a short string representation
	 */
	public String toShortString() {
		if (!hypotheses.isEmpty()) {
			String hypo = getBestHypothesis();
			if (hypotheses.get(hypo) > 0.99) {
				return hypo;
			}
			else {
				return hypo + " (" + hypotheses.get(hypo) + ")";
			}
		}
		else {
			return "(nothing recognised)";
		}
	}
	
	
	/**
	 * Returns a string representation of the N-best list
	 *
	 * @return the string representation
	 */
	@Override
	public String toString() {
		String str = "{";
		for (String utt : hypotheses.keySet()) {
			str += "\"" + utt + "\" (" + hypotheses.get(utt) + "), ";
		}
		return str.substring(0,str.length()-2) + "}";
	}
}
